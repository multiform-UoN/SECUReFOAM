/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.0                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
libs	("libdarcyBoundaryConditions.so");
application poroelasticFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         60000;

deltaT          1000;

writeControl    runTime;

writeInterval   10000;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

functions
{
    breakthrough
    {
        // Load the library containing the 'coded' functionObject
        libs            ("libutilityFunctionObjects.so");

        type coded;

        // Name of on-the-fly generated functionObject
        name breakthrough;

        codeExecute
        #{
            const volVectorField& U = mesh().lookupObject<volVectorField>("U");

            //Get outlet patch
                label patchId = mesh().boundaryMesh().findPatchID("outlet");
                const vectorField& UOut = U.boundaryField()[patchId];

                scalar totFluxOut =
                    gSum(UOut&mesh().Sf().boundaryField()[patchId]);

                patchId = mesh().boundaryMesh().findPatchID("inlet");
                const vectorField& UIn = U.boundaryField()[patchId];

                scalar totFluxIn =
                    gSum(UIn&mesh().Sf().boundaryField()[patchId]);

            if(mesh().time().write())
            {
                std::ofstream file;
                file.open("breakthrough.dat", std::ios::out | std::ios::app);
                Info << "breakthrough " <<  mesh().time().timeName()
                    << " " << totFluxOut
                    << " " << totFluxIn <<"\n";
            }
        #};
    }
}



// ************************************************************************* //
