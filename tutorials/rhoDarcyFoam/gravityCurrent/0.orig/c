/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5.0                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      c;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [1 -3 0 0 0 0 0];

internalField  #codeStream
{
  codeInclude
  #{
     #include "fvCFD.H"
     #include "Random.H"
     #include "Time.H"
  #};

  codeOptions
  #{
     -I$(LIB_SRC)/finiteVolume/lnInclude \
     -I$(LIB_SRC)/meshTools/lnInclude
  #};

  codeLibs
  #{
     -lmeshTools \
     -lfiniteVolume
  #};

  code
  #{
     const IOdictionary& d = static_cast<const IOdictionary&>(dict);
     const fvMesh& mesh = refCast<const fvMesh>(d.db());

     scalarField c(mesh.nCells(), 0.);
     Random randObj(time(NULL));      

    //  scalar beta = 0.2; //(1/rho)*drho/dc
    //  scalar H = 50;    // height of the domain.

    const pointField& points = mesh.points();   // Node coordinates
    scalar maxx = 0.0;
    forAll(points, p) {
        if (points[p].x() >= maxx) {
            maxx = points[p].x();
        }
    }

     scalar xini = maxx / 5.0;
     
     forAll(c, i)
     {
       const scalar x = mesh.C()[i][0];
       const scalar z = mesh.C()[i][2];

       c[i] = 0.5 * (1. - tanh(100.*(x - xini)));
     }

     writeEntry(os, "", c);

  #};
};


boundaryField
{
    left
    {
        type            zeroGradient;
    }
    
    right
    {
        type            zeroGradient;
    }
    
    bottom
    {
        type            zeroGradient;
    }
    top
    {
        type            zeroGradient;

    }
    front
    {
        type            empty;
    }
    back
    {
        type            empty;
    }
}


// ************************************************************************* //
