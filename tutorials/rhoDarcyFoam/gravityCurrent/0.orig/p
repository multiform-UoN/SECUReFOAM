/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.0                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      p;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [1 -1 -2 0 0 0 0];

internalField   uniform 0.0;
// internalField  #codeStream
// {
//   codeInclude
//   #{
//      #include "fvCFD.H"
//      #include "Time.H"
//   #};

//   codeOptions
//   #{
//      -I$(LIB_SRC)/finiteVolume/lnInclude \
//      -I$(LIB_SRC)/meshTools/lnInclude
//   #};

//   codeLibs
//   #{
//      -lmeshTools \
//      -lfiniteVolume
//   #};

//   code
//   #{
//      const IOdictionary& d = static_cast<const IOdictionary&>(dict);
//      const fvMesh& mesh = refCast<const fvMesh>(d.db());

//      scalarField p(mesh.nCells(), 0.);
//      scalar rho0 = 1000;
//      scalar g = 9.81;
//      scalar beta = 0.2; //(1/rho)*drho/dc
//      scalar H = 50;    // height of the domain.
 
//      forAll(p, i)
//      {
//        const scalar z = mesh.C()[i][2];

//        p[i] = (2*rho0*g*H)/(3.*beta*(2. + beta))*(pow((1. + beta*(2. + beta)),3/2) - pow(1. + beta*(2. + beta)*(z/H),3/2));
//      }

//      writeEntry(os, "", p);

//   #};
// };

boundaryField
{
    left
    {
        type            darcyFixedVelocity;
        velocity        0;
        value           uniform 0;
    }
    
    right
    {
        // type            darcyFixedVelocity;
        // velocity        0;
        // value            uniform 0;
        type            fixedValue;
	    value           uniform 0.0;
    }
    
    bottom
    {
        type            darcyFixedVelocity;
        velocity        0;
        value           uniform 0;
    }
    top
    {
        type            darcyFixedVelocity;
        velocity        0;
        value           uniform 0;

    }
    front
    {
        type            empty;
    }
    back
    {
        type            empty;
    }
}


// ************************************************************************* //
